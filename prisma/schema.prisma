datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum RequestType {
  EXCLUSIVE
  HYPER_EXCLUSIVE
}

enum RequestStatus {
  ACTIVE
  EXPIRED
  REJECTED
  MATCHED
  BUSY // Means they have gone exclusive with someone else
}

enum ChallengeVerificationStatus {
  VERIFIED
  NOT_VERIFIED
}

enum DatingPreference {
  MEN
  WOMEN
  NONBINARY
}

model User {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  email              String?   @unique
  phone              String    @unique
  country            String
  password           String
  tAndCConsent       Boolean
  firstname          String?
  lastname           String?
  blockedListUserIds String[]
  wallet             Wallet?
  chats              Chat[]
  prompts            Prompt[]
  Request            Request[]
  profileId          String?
  Profile            Profile?
}

model Profile {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  completed         Boolean?
  name              String?
  showTruncatedName Boolean?
  dob               String?
  gender            DatingPreference?
  pronouns          String?
  photoURLs         String[]
  datingPreference  DatingPreference?
  interests         String?
  user              User              @relation(fields: [userId], references: [id])
  userId            String            @unique
}

model Wallet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Prompt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Request {
  id                          String                      @id @default(cuid())
  type                        RequestType
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  user                        User                        @relation(fields: [userId], references: [id])
  userId                      String                      @unique
  requesterProfileId          String
  requesteeProfileId          String
  expiry                      DateTime
  status                      RequestStatus
  challenge                   String? // challenge: { "weeklyDates": 3, "betAmountUSD": 10}
  challengeVerification       String? // challengeVerification: { "requesterLocation": [10.31,30.45], "requesterLocation": [10.31, 45.32]}
  challengeVerificationStatus ChallengeVerificationStatus @default(NOT_VERIFIED)
}
